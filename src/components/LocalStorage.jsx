import { useState, useEffect } from 'react';

function LocalStorage({ theme, toggleTheme }) {
  const [key, setKey] = useState('');
  const [value, setValue] = useState('');
  const [storedItems, setStoredItems] = useState({});

  useEffect(() => {
    refreshStoredItems();
  }, []);

  const refreshStoredItems = () => {
    const items = {};
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      items[key] = localStorage.getItem(key);
    }
    setStoredItems(items);
  };

  const handleSave = () => {
    if (key.trim() && value.trim()) {
      localStorage.setItem(key, value);
      refreshStoredItems();
      setKey('');
      setValue('');
    }
  };

  // Remove an item
  const handleRemove = (keyToRemove) => {
    localStorage.removeItem(keyToRemove);
    refreshStoredItems();
  };

  // Clear all items
  const handleClearAll = () => {
    localStorage.clear();
    refreshStoredItems();
  };

  return (
    <div className="storage-container">
      <h2>–ü—Ä–∏–º–µ—Ä –õ–æ–∫–∞–ª—å–Ω–æ–≥–æ –•—Ä–∞–Ω–∏–ª–∏—â–∞</h2>

      <div className="theme-toggle">
        <label htmlFor="theme-toggle">–¢–µ–º–∞:
          <div className="toggle-switch">
            <input
              type="checkbox"
              id="theme-toggle"
              checked={theme === 'dark'}
              onChange={toggleTheme}
            />
            <span className="toggle-slider"></span>
          </div>
          <span className="toggle-icon">{theme === 'dark' ? 'üåô' : '‚òÄÔ∏è'}</span>
        </label>
      </div>

      <div className="storage-info">
        <p>
          –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–± —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –∫–ª—é—á/–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
          –í –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è 
          –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞.
        </p>
        <p>
          –û–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        </p>
      </div>

      <div className="storage-form">
        <div className="form-group">
          <label htmlFor="localKey">–ö–ª—é—á:</label>
          <input
            id="localKey"
            type="text"
            value={key}
            onChange={(e) => setKey(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á"
          />
        </div>

        <div className="form-group">
          <label htmlFor="localValue">–ó–Ω–∞—á–µ–Ω–∏–µ:</label>
          <input
            id="localValue"
            type="text"
            value={value}
            onChange={(e) => setValue(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
          />
        </div>

        <button onClick={handleSave}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        <button onClick={handleClearAll}>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë</button>
      </div>

      <div className="storage-items">
        <h3>–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:</h3>
        {Object.keys(storedItems).length === 0 ? (
          <p>–ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</p>
        ) : (
          <ul>
            {Object.entries(storedItems).map(([itemKey, itemValue]) => (
              <li key={itemKey}>
                <strong>{itemKey}:</strong> {itemValue}
                <button 
                  className="remove-btn" 
                  onClick={() => handleRemove(itemKey)}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </li>
            ))}
          </ul>
        )}
      </div>
    </div>
  );
}

export default LocalStorage;
